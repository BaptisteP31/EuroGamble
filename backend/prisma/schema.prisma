generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  passwordHash String
  displayName  String
  role         String    @default("user")
  profilePicture String? // base64-encoded image data
  createdAt    DateTime  @default(now())
  predictions  Prediction[]
  groups       Group[]   @relation("GroupOwner")
  groupMembers GroupMember[]
  scores       Score[]
  emailVerified Boolean  @default(false)
  emailVerificationToken String? @unique @default(uuid())
  resetPasswordToken String? @unique
}

model Contest {
  id                 Int       @id @default(autoincrement())
  year               Int
  hostCountryCode    String
  submissionDeadline DateTime
  isActive           Boolean   @default(true)
  entries            Entry[]
  results            Result[]
  predictions        Prediction[]
  groups             Group[]
}

model Entry {
  id          Int    @id @default(autoincrement())
  contest     Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)
  contestId   Int
  countryCode String
  title       String
  artist      String
  results     Result[]
  predictions Prediction[]
  @@unique([contestId, countryCode])
}

model Result {
  id       Int     @id @default(autoincrement())
  entry    Entry   @relation(fields: [entryId], references: [id], onDelete: Cascade)
  entryId  Int
  points   Int
  contest  Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)
  contestId Int
  @@unique([entryId])
}

model Prediction {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  contest   Contest   @relation(fields: [contestId], references: [id], onDelete: Cascade)
  contestId Int
  entry     Entry     @relation(fields: [entryId], references: [id], onDelete: Cascade)
  entryId   Int
  position  Int
  submittedAt DateTime @default(now())
  @@unique([userId, contestId, entryId])
}

model Group {
  id        Int          @id @default(autoincrement())
  name      String
  code      String       @unique
  owner     User?       @relation("GroupOwner", fields: [ownerId], references: [id], onDelete: SetNull)
  ownerId   String?
  contest   Contest      @relation(fields: [contestId], references: [id], onDelete: Cascade)
  contestId Int
  score     Score[]
  members   GroupMember[]
}

model GroupMember {
  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId Int
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  @@id([groupId, userId])
}

// Table used to store scores for users
// Will be calculated based on their predictions and actual results
// Only computed once the contest has ended
model Score {
  id      Int     @id @default(autoincrement())
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  group   Group?  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId Int?
  points  Int
  rank    Int?
  @@unique([userId, groupId])
}